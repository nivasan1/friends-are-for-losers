// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/nivasan1/friends-are-for-losers/pkg/types"
)

// Tracker is an autogenerated mock type for the Tracker type
type Tracker struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Tracker) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Track provides a mock function with given fields: _a0
func (_m *Tracker) Track(_a0 context.Context) <-chan *types.Registration {
	ret := _m.Called(_a0)

	var r0 <-chan *types.Registration
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *types.Registration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *types.Registration)
		}
	}

	return r0
}

type mockConstructorTestingTNewTracker interface {
	mock.TestingT
	Cleanup(func())
}

// NewTracker creates a new instance of Tracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTracker(t mockConstructorTestingTNewTracker) *Tracker {
	mock := &Tracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
